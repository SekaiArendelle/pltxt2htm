import os

if __name__ != "__main__":
    print("This script is not meant to be imported.")
    exit(1)

__version__ = (0, 5, 1)

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# Generate include/pltxt2htm/version.hh
INCLUDE_VERSION_PATH = os.path.join(SCRIPT_DIR, "include", "pltxt2htm", "version.hh")

context = f"""// Generated by gen_version.py, do not edit
#pragma once

#include <cstddef>

namespace pltxt2htm::version {{

// For breaking change
inline constexpr ::std::size_t major{{{__version__[0]}}};
// For new features without breaking change
inline constexpr ::std::size_t minor{{{__version__[1]}}};
// For bug fixes without new features
inline constexpr ::std::size_t patch{{{__version__[2]}}};

}} // namespace pltxt2htm::version
"""

with open(INCLUDE_VERSION_PATH, "w", newline='') as f:
    f.write(context)

# Generate c/version.lua
C_VERSION_PATH = os.path.join(SCRIPT_DIR, "c", "xmake.lua")

context = f"set_version(\"{__version__[0]}.{__version__[1]}.{__version__[2]}\", {{soname = true}}) -- This line has been generated by gen_version.py, do not edit"

with open(C_VERSION_PATH, "r+", newline='') as f:
    _context = f.read().splitlines()
    _context[0] = context
    f.seek(0)
    f.write("".join(line + '\n' for line in _context))

# Generate py/version.py
PY_VERSION_PATH = os.path.join(SCRIPT_DIR, "py", "version.py")

context = f"""# Generated by gen_version.py, do not edit
__version__ = "{__version__[0]}.{__version__[1]}.{__version__[2]}"
"""

with open(PY_VERSION_PATH, "w", newline='') as f:
    f.write(context)
